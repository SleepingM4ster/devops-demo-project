pipeline {
  agent any
  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/abdelbaki-bouzaienne/devops-demo-project.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd demo-java-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://sonarqube:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'SonarCube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd demo-java-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "thomasdelahaye91/demo-java-app:${build_version}"
        REGISTRY_CREDENTIALS = credentials('DockerHub')
      }
      steps {
        script {
            sh 'cd demo-java-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "DockerHub") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "devops-demo-project"
            GIT_USER_NAME = "SleepingM4ster"
        }
        steps {
            sshagent(['9350cf2f-84f8-4c24-915b-f4655a2e16cb']) {
                sh '''
                    git config user.email "thomasjddelahaye4@gmail.com"
                    git config user.name "SleepingM4ster"
                    git remote set-url origin git@github.com:${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                    sed -i "s/tag: .*/tag: \\"${build_version}\\"/" helm/app/values.yaml
                    git add helm/app/values.yaml
                    git commit -m "Update deployment image to version ${build_version}" || echo "No changes to commit"
                    git push origin HEAD:main
                '''
            }
        }
    }
  }
}
